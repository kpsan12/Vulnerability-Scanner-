from __future__ import print_function
import os.path
import base64
import logging
from email.mime.text import MIMEText
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Set up logging
logging.basicConfig(level=logging.INFO)

# Define the required Gmail API scope
SCOPES = ['https://www.googleapis.com/auth/gmail.send']

def get_gmail_service():
    """Authenticate and return the Gmail API service."""
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                r'd:\Secure coding project\credentials.json', SCOPES)
            creds = flow.run_local_server(port=8080)  # Use a fixed port
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return build('gmail', 'v1', credentials=creds)

def send_email_alert(results, sender_email, receiver_email, target_url):
    """Send a vulnerability scan report via Gmail."""
    try:
        service = get_gmail_service()

        # Create a formatted email body with HTML content
        email_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <h1 style="color: #4a4a4a;">Web Vulnerability Scan Results</h1>
            <h2 style="color: #0056b3;">Target Details:</h2>
            <p><strong>URL:</strong> {target_url}</p>
            <h2 style="color: #0056b3;">Scan Results:</h2>
            <ul style="list-style-type: none; padding-left: 0;">
        """

        # Dynamically populate results in the email
        for result in results:
            if "Vulnerability" in result:
                email_body += (
                    f'<li style="margin-bottom: 10px; padding: 10px; background-color: #ffeeee; '
                    f'border-left: 5px solid #ff0000;"><strong>üö® {result}</strong></li>'
                )
            elif "Misconfiguration" in result:
                email_body += (
                    f'<li style="margin-bottom: 10px; padding: 10px; background-color: #fff6e6; '
                    f'border-left: 5px solid #ffa500;"><strong>‚ö†Ô∏è {result}</strong></li>'
                )
            else:
                email_body += (
                    f'<li style="margin-bottom: 10px; padding: 10px; background-color: #f0f0f0; '
                    f'border-left: 5px solid #4a4a4a;">‚ÑπÔ∏è {result}</li>'
                )

        email_body += """
            </ul>
            <p style="color: #666;">This is an automated security scan report. 
            Please review the findings and take appropriate action.</p>
        </body>
        </html>
        """

        # Build the MIME message
        message = MIMEText(email_body, 'html')
        message['to'] = receiver_email
        message['from'] = sender_email
        message['subject'] = f'Web Vulnerability Scan Results for {target_url}'

        # Encode the message for Gmail API
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')

        # Send the email using Gmail API
        sent_message = service.users().messages().send(userId="me", body={'raw': raw_message}).execute()
        logging.info(f'Message Id: {sent_message["id"]}')
    except HttpError as error:
        logging.error(f'An error occurred: {error}')
        logging.error(f'Response: {error.resp.status} - {error._get_reason()}')
